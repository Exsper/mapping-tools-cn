<local:SingleRunMappingTool x:Class="Mapping_Tools.Views.Sliderator.SlideratorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Mapping_Tools.Views"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:graph="clr-namespace:Mapping_Tools.Components.Graph"
             xmlns:domain="clr-namespace:Mapping_Tools.Components.Domain"
             xmlns:objectVisualiser="clr-namespace:Mapping_Tools.Components.ObjectVisualiser"
             mc:Ignorable="d" 
             x:Name="This"
             Loaded="SlideratorView_OnLoaded"
             d:DesignHeight="450" Width="759.5" d:DataContext="{d:DesignData SlideratorVm}">
    <local:SingleRunMappingTool.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
        <domain:DoubleToStringConverter x:Key="DoubleToStringConverter"/>
        <domain:TimeToStringConverter x:Key="TimeToStringConverter"/>
        <domain:MultiValueConverterGroup x:Key="BooleanInvertToVisibilityConverter">
            <domain:BooleanInvertConverter/>
            <domain:BooleanToVisibilityConverter/>
        </domain:MultiValueConverterGroup>
        <domain:MultiValueConverterGroup x:Key="BooleanAOrNotBConverter">
            <domain:IdentityConverter/>
            <domain:BooleanInvertConverter/>
            <domain:BooleanOrConverter/>
        </domain:MultiValueConverterGroup>
        <domain:MultiValueConverterGroup x:Key="BooleanAAndNotBConverter">
            <domain:IdentityConverter/>
            <domain:BooleanInvertConverter/>
            <domain:BooleanAndConverter/>
        </domain:MultiValueConverterGroup>
        <domain:BooleanInvertConverter x:Key="BooleanInvertConverter"/>
    </local:SingleRunMappingTool.Resources>
    <Grid Name="MasterGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Orientation="Horizontal">
            <TextBlock FontSize="32" FontWeight="Bold" Foreground="{DynamicResource PrimaryHueMidBrush}">
                <Run Text="Sliderator"/>
            </TextBlock>
            <materialDesign:PopupBox Margin="10" VerticalAlignment="Bottom" ToolTip="点我！">
                <materialDesign:PopupBox.ToggleContent>
                    <materialDesign:PackIcon Kind="HelpCircle" Width="24" Height="24" Foreground="{DynamicResource SecondaryHueMidBrush}"/>
                </materialDesign:PopupBox.ToggleContent>
                <TextBlock TextWrapping="Wrap" MaxWidth="600" Padding="5">
                    Sliderator is a tool meant to make sliders with variable velocity. That means sliders that change speed during the animation. You can also make variable velocity streams with this tool.
                    <LineBreak/>
                    <LineBreak/>
                    The UI consists of a slider import section, some options, a position/velocity graph, and a slider preview.
                    <LineBreak/>
                    <LineBreak/>
                    To get started, simply import one or more sliders using the 'Import sliders' button. Use any of the three different import methods from the dropdown menu.
                    <LineBreak/>
                    <LineBreak/>
                    The most important element is the position/velocity graph. This is where you tell Sliderator what you want your slider animation to look like. You can toggle between position and velocity mode by clicking the accent colored button below.
                    <LineBreak/>
                    Add, remove, or edit anchors with right click and move stuff by dragging with left click. While dragging, hold Shift for horizontal clipping, hold Ctrl for vertical clipping, and hold Alt to disable snapping.
                    <LineBreak/>
                    <LineBreak/>
                    Running Sliderator with a constant velocity will give back the original slider. You can manually choose a lower SV and bigger tumour length to optimise your slider.
                    <LineBreak/>
                    <LineBreak/>
                    Check out all the options. The tooltips should help you further.
                </TextBlock>
            </materialDesign:PopupBox>
            <materialDesign:PopupBox Margin="0,10,10,10" VerticalAlignment="Bottom" ToolTip="点我！">
                <materialDesign:PopupBox.ToggleContent>
                    <materialDesign:PackIcon Kind="LightningBoltCircle" Width="24" Height="24" Foreground="{DynamicResource PrimaryHueLightBrush}"/>
                </materialDesign:PopupBox.ToggleContent>
                <TextBlock TextWrapping="Wrap" MaxWidth="600" Padding="5">
                    This tool is compatible with QuickRun!
                </TextBlock>
            </materialDesign:PopupBox>
        </StackPanel>

        <Grid Name="FirstGrid" Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="2*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" MinWidth="200"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="90"/>
            </Grid.ColumnDefinitions>

            <graph:Graph Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="3" x:Name="Graph" MinMarkerSpacing="20"
                         Margin="43 0 0 43" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                         MaxX="{Binding GraphBeats, Mode=TwoWay}"/>

            <materialDesign:Card Grid.Column="2" Grid.Row="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0" Padding="10"
                                 ToolTip="Result preview">
                <objectVisualiser:HitObjectElement x:Name="GraphHitObjectElement" Width="200" HitObject="{Binding VisibleHitObject}"
                                                   Stroke="YellowGreen" Fill="DarkSlateGray" SliderBallStroke="White" Thickness="50"/>
            </materialDesign:Card>

            <ScrollViewer Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Margin="0 10 0 0" VerticalScrollBarVisibility="Auto">
                    <StackPanel>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ComboBox Grid.Column="0" ItemsSource="{Binding ImportModes}" SelectedItem="{Binding ImportModeSetting}" Margin="0 0 5 0"
                                  ToolTip="Import mode"/>

                        <TextBox Grid.Column="1" Text="{Binding TimeCode}" Visibility="{Binding TimeCodeBoxVisibility}" Margin="5 0 5 2" Width="100"
                                 materialDesign:HintAssist.Hint="Time code"
                                 ToolTip="Input a time code here. Example time code: 00:56:823 (1,2,1,2) - "/>

                        <Button Grid.Column="2" Style="{StaticResource MaterialDesignRaisedButton}" Command="{Binding ImportCommand}" Margin="5 0 0 0"
                                ToolTip="Import sliders into the preview." HorizontalAlignment="Right" VerticalAlignment="Top">
                            Import sliders
                        </Button>
                    </Grid>
                    <Grid Margin="0 10 0 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0" Text="{Binding LoadedHitObjects.Count, StringFormat={}Loaded {0} slider(s)}"/>

                        <StackPanel Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
                            <Button Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" Margin="0 0 5 0"
                                    Command="{Binding MoveLeftCommand}"
                                    ToolTip="Go to previous slider. Hold Shift for quick run before going to previous slider.">
                                <Button.Content>
                                    <materialDesign:PackIcon Kind="KeyboardArrowLeft" Width="24" Height="24"/>
                                </Button.Content>
                            </Button>
                            <Button Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}"
                                    Command="{Binding MoveRightCommand}"
                                    ToolTip="Go to next slider. Hold Shift for quick run before going to next slider.">
                                <Button.Content>
                                    <materialDesign:PackIcon Kind="KeyboardArrowRight" Width="24" Height="24"/>
                                </Button.Content>
                            </Button>
                        </StackPanel>
                    </Grid>
                    <Grid Margin="0 10 0 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <TextBox Grid.Column="0" Margin="0 0 10 0" materialDesign:HintAssist.Hint="Beat length" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                                 ToolTip="Duration of the slider in beats.">
                            <TextBox.Text>
                                <Binding Path="GraphBeats" Mode="TwoWay" UpdateSourceTrigger="LostFocus"  NotifyOnValidationError="True">
                                    <Binding.Converter>
                                        <domain:DoubleToStringConverter/>
                                    </Binding.Converter>
                                    <Binding.ValidationRules>
                                        <domain:IsLessOrEqualValidationRule>
                                            <domain:IsLessOrEqualValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper Value="10000"/>
                                            </domain:IsLessOrEqualValidationRule.ValueWrapper>
                                        </domain:IsLessOrEqualValidationRule>
                                        <domain:IsGreaterOrEqualValidationRule>
                                            <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper Value="0"/>
                                            </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                        </domain:IsGreaterOrEqualValidationRule>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <TextBox Grid.Column="1" Margin="0 0 10 0" materialDesign:HintAssist.Hint="BPM" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                                 ToolTip="The BPM at which this slider gets played.">
                            <TextBox.Text>
                                <Binding Path="BeatsPerMinute" Mode="TwoWay" UpdateSourceTrigger="LostFocus" NotifyOnValidationError="True">
                                    <Binding.Converter>
                                        <domain:DoubleToStringConverter/>
                                    </Binding.Converter>
                                    <Binding.ValidationRules>
                                        <domain:IsGreaterValidationRule>
                                            <domain:IsGreaterValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper Value="0"/>
                                            </domain:IsGreaterValidationRule.ValueWrapper>
                                        </domain:IsGreaterValidationRule>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <TextBox Grid.Column="2" Margin="0" materialDesign:HintAssist.Hint="Global SV" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                                 ToolTip="The Global Slider Velocity at which this slider gets played.">
                            <TextBox.Text>
                                <Binding Path="GlobalSv" Mode="TwoWay" UpdateSourceTrigger="LostFocus" NotifyOnValidationError="True">
                                    <Binding.Converter>
                                        <domain:DoubleToStringConverter/>
                                    </Binding.Converter>
                                    <Binding.ValidationRules>
                                        <domain:IsLessOrEqualValidationRule>
                                            <domain:IsLessOrEqualValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper Value="3.6"/>
                                            </domain:IsLessOrEqualValidationRule.ValueWrapper>
                                        </domain:IsLessOrEqualValidationRule>
                                        <domain:IsGreaterOrEqualValidationRule>
                                            <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                                <domain:DoubleWrapper Value="0.4"/>
                                            </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                        </domain:IsGreaterOrEqualValidationRule>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                    </Grid>

                    <TextBox Margin="0 20 0 0" materialDesign:HintAssist.Hint="Time" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                             ToolTip="The time in the current beatmap to export the sliderated slider to."
                             Text="{Binding ExportTime, Converter={StaticResource TimeToStringConverter}}"/>

                    <ComboBox Margin="0 10 0 0" ToolTip="Choose how you want to export sliders." ItemsSource="{Binding ExportModes}"
                              SelectedItem="{Binding ExportModeSetting}"/>

                    <RadioButton Content="Export as slider" Margin="0 10 0 0"
                                 GroupName="exportFormat"
                                 ToolTip="Exports a normal sliderated slider."
                                 IsChecked="{Binding ExportAsNormal}"/>
                    <RadioButton Content="Export as stream" Margin="0 0 0 0"
                                 GroupName="exportFormat"
                                 ToolTip="Exports an accelerating stream. This stream uses the beat snap divisor of the graph to determine the density of notes."
                                 IsChecked="{Binding ExportAsStream}"/>
                    <RadioButton Content="Export as invisible slider" Margin="0 0 0 0"
                                 GroupName="exportFormat"
                                 ToolTip="Makes the slider invisible using a method by JPK314. This will also delegate SV to BPM."
                                 IsChecked="{Binding ExportAsInvisibleSlider}"/>

                    <CheckBox x:Name="ManualSvBox" Content="Manually choose new SV" Margin="0 10 0 5"
                              ToolTip="Allows you to manually choose the SV for the sliderator algorithm and optimise the resulting slider."
                              IsChecked="{Binding ManualVelocity}" Visibility="{Binding ExportAsNormal, Converter={StaticResource BooleanToVisibilityConverter}}">
                    </CheckBox>
                    <TextBox materialDesign:HintAssist.Hint="New SV" Style="{StaticResource MaterialDesignFloatingHintTextBox}" Margin="0 0 0 5"
                             ToolTip="The new SV for the sliderated slider. This SV influences the Sliderator algorithm. Use lower SV for less lag."
                             IsEnabled="{Binding ManualVelocity}" Visibility="{Binding ExportAsNormal, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBox.Text>
                            <Binding Path="NewVelocity" Mode="TwoWay" UpdateSourceTrigger="LostFocus"  NotifyOnValidationError="True">
                                <Binding.Converter>
                                    <domain:DoubleToStringConverter/>
                                </Binding.Converter>
                                <Binding.ValidationRules>
                                    <domain:IsGreaterOrEqualValidationRule>
                                        <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper Value="0"/>
                                        </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                    </domain:IsGreaterOrEqualValidationRule>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <TextBox materialDesign:HintAssist.Hint="Minimum tumour length" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                             ToolTip="Minimum length for tumours which slow down the sliderball in the sliderated slider. Longer tumours result in less lag but a more shaky sliderball."
                             Visibility="{Binding ExportAsNormal, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBox.Text>
                            <Binding Path="MinDendrite" Mode="TwoWay" UpdateSourceTrigger="LostFocus"  NotifyOnValidationError="True">
                                <Binding.Converter>
                                    <domain:DoubleToStringConverter/>
                                </Binding.Converter>
                                <Binding.ValidationRules>
                                    <domain:IsLessOrEqualValidationRule>
                                        <domain:IsLessOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper Value="12"/>
                                        </domain:IsLessOrEqualValidationRule.ValueWrapper>
                                    </domain:IsLessOrEqualValidationRule>
                                    <domain:IsGreaterOrEqualValidationRule>
                                        <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper Value="1"/>
                                        </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                    </domain:IsGreaterOrEqualValidationRule>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>

                    <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                        <TextBlock Text="Expected segment count: "
                                   ToolTip="This is the estimated segment count for your result. More segments means more lag, so try to optimise this value."/>
                        <TextBlock Text="{Binding ExpectedSegments}"
                                   ToolTip="This is the estimated segment count for your result. More segments means more lag, so try to optimise this value."/>
                    </StackPanel>

                    <CheckBox x:Name="DelegateSvToBpmBox" Content="Delegate SV to BPM" Margin="0 15 0 0"
                              ToolTip="Use BPM to determine the velocity of the resulting slider instead of greenline SV. This allows you to use SV higher than 10x."
                              IsChecked="{Binding DelegateToBpm}" Visibility="{Binding ExportAsNormal, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <CheckBox Content="Remove slider ticks"
                              ToolTip="Use a NaN greenline to remove slider ticks from the resulting slider."
                              IsChecked="{Binding RemoveSliderTicks}" Visibility="{Binding ExportAsNormal, Converter={StaticResource BooleanToVisibilityConverter}}"
                              IsEnabled="{Binding DelegateToBpm}"/>
                </StackPanel>
            </ScrollViewer>

            <Grid Grid.Row="1" Grid.Column="1" Margin="10 0 10 0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0" Margin="8 0 8 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <TextBox Grid.Column="0" Margin="0 0 8 0" HorizontalAlignment="Left"
                             materialDesign:HintAssist.Hint="SV limit" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                             MaxWidth="140" MinWidth="100"
                             ToolTip="Self-imposed SV limit to help you make sure the slope in the graph doesn't become greater than this speed limit. For example use 10x SV limit to match the osu! speed limit."
                             Visibility="{Binding ExportAsNormal, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBox.Text>
                            <Binding Path="VelocityLimit" Mode="TwoWay" Converter="{StaticResource DoubleToStringConverter}" ConverterParameter="10" UpdateSourceTrigger="LostFocus"  NotifyOnValidationError="True">
                                <Binding.ValidationRules>
                                    <domain:IsLessOrEqualValidationRule>
                                        <domain:IsLessOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper Value="100000"/>
                                        </domain:IsLessOrEqualValidationRule.ValueWrapper>
                                    </domain:IsLessOrEqualValidationRule>
                                    <domain:IsGreaterOrEqualValidationRule>
                                        <domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                            <domain:DoubleWrapper Value="0"/>
                                        </domain:IsGreaterOrEqualValidationRule.ValueWrapper>
                                    </domain:IsGreaterOrEqualValidationRule>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>

                    <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" Margin="0 0 5 0"
                                ToolTip="Scale graph to completion." Click="ScaleCompleteButton_OnClick">
                            <Button.Content>
                                <materialDesign:PackIcon Kind="RelativeScale" Width="24" Height="24"/>
                            </Button.Content>
                        </Button>
                        <Button Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" Margin="0 0 5 0"
                                ToolTip="Reset graph." Click="ClearButton_OnClick">
                            <Button.Content>
                                <materialDesign:PackIcon Kind="Rocket" Width="24" Height="24"/>
                            </Button.Content>
                        </Button>
                        <Button Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Margin="5 0 0 0"
                                ToolTip="Toggle graph mode." Command="{Binding GraphToggleCommand}">
                            <Button.Content>
                                <Viewbox Width="24" Height="24">
                                    <TextBlock x:Name="GraphToggleContentTextBlock" FontWeight="Bold">V</TextBlock>
                                </Viewbox>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </Grid>

                <Slider Grid.Row="1" Minimum="1" Maximum="16" Value="{Binding BeatSnapDivisor}" Style="{StaticResource MaterialDesignDiscreteSlider}"
                        ToolTip="Beat snap divisor." Margin="0 5 0 0"/>

                <ToolBarOverflowPanel HorizontalAlignment="Left" Grid.Row="2" Margin="5 10 5 0">
                    <CheckBox IsChecked="{Binding ShowRedAnchors}" Content="Show red anchors" Margin="0 0 5 0"
                              ToolTip="Show the positions of red anchors in the graph and preview."/>
                    <CheckBox IsChecked="{Binding ShowGraphAnchors}" Content="Show graph anchors"
                              ToolTip="Show the positions of graph anchors in the preview."/>
                </ToolBarOverflowPanel>
            </Grid>

            <Viewbox Grid.Row="1" Grid.Column="3" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="70">
                <Button
                    Style="{StaticResource MaterialDesignFloatingActionButton}"
                    IsEnabled="{Binding ElementName=This, Path=CanRun}"
                    Click="Start_Click"
                    ToolTip="运行该工具。">
                    <materialDesign:PackIcon
                        Kind="Play" Height="36" Width="36" />
                </Button>
            </Viewbox>
        </Grid>

        <Grid Name="SecondGrid" Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0">
                <WrapPanel VerticalAlignment="Bottom">
                    <TextBlock TextWrapping="NoWrap" Text="由 OliBomby, Karoo, &amp; JPK314 制作" FontWeight="Bold" Opacity="0.58"/>
                </WrapPanel>
            </Grid>
            <Grid Grid.Column="1">
                <ProgressBar Value="{Binding ElementName=This, Path=Progress}" Margin="20,0,20,0" Height="20" Background="{x:Null}" BorderBrush="{x:Null}"/>
            </Grid>
        </Grid>
    </Grid>
</local:SingleRunMappingTool>
